{"version":3,"file":"main.js","sourceRoot":"","sources":["../main.ts"],"names":[],"mappings":"AAAC,SAAS,KAAK,CAAC,MAAc,EAAE,GAAW;IACvC,IAAG,OAAO,MAAM,IAAI,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAElG,MAAM,YAAY,GAAQ,GAAG,CAAC;IAC9B,MAAM,YAAY,GAAQ,MAAM,CAAC;IAEhC,MAAM,aAAa,GAAU,EAAE,CAAC;IAE7B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK,EAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QACjD,MAAM,UAAU,GAAY,CAAC,OAAO,KAAK,IAAI,QAAQ,IAAI,UAAU,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;QAEtG,IAAG,GAAG,IAAI,GAAG,EAAE;YAEX,IAAG,OAAO,KAAK,IAAI,QAAQ,EAAE;gBACzB,IAAG,OAAO,YAAY,CAAC,GAAG,CAAC,IAAI,KAAK,EAAG;oBACnC,aAAa,CAAC,IAAI,CAAC,yBAAyB,GAAG,qBAAqB,KAAK,IAAI,CAAC,CAAA;iBACjF;gBAED,OAAO;aACV;YAGD,IAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;gBAGhE,IAAG,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE;oBAClC,aAAa,CAAC,IAAI,CAAC,yBAAyB,GAAG,2BAA2B,CAAC,CAAA;oBAE3E,OAAO;iBACV;gBAED,YAAY,CAAC,GAAG,CAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC9C,MAAM,MAAM,GAAQ,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAGvC,IAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;wBAClB,aAAa,CAAC,IAAI,CAAC,0BAA0B,GAAG,KAAK,CAAC,MAAM,MAAM,EAAE,CAAC,CAAA;qBACxE;gBAIN,CAAC,CAAC,CAAA;gBAID,OAAO;aACV;YAED,IAAG,OAAO,KAAK,CAAC,IAAI,IAAI,QAAQ,EAAE;gBAC9B,IAAG,OAAO,YAAY,CAAC,GAAG,CAAC,IAAI,QAAQ,EAAE;oBAErC,aAAa,CAAC,IAAI,CAAC,yBAAyB,GAAG,2BAA2B,CAAC,CAAC;iBAE/E;qBAAM;oBAEH,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;oBAEpD,IAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;wBAClB,aAAa,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC,CAAC;qBACnD;iBACJ;aAGJ;iBAAO;gBACJ,IAAG,OAAO,YAAY,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,IAAI,EAAE;oBACvC,aAAa,CAAC,IAAI,CAAC,yBAAyB,GAAG,qBAAqB,KAAK,CAAC,IAAI,IAAI,CAAC,CAAA;iBACtF;qBAAM,IAAG,KAAK,IAAI,YAAY,CAAC,GAAG,CAAC,IAAI,OAAO,UAAU,EAAE;oBAKvD,IAAI,YAAiB,CAAC;oBACtB,MAAM,SAAS,GAAG,CAAC,CAAM,EAAE,EAAE,CAAC,YAAY,GAAG,CAAC,CAAC;oBAE/C,MAAM,WAAW,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;oBAC3E,MAAM,UAAU,GAAY,CAAC,WAAW,IAAI,IAAI,IAAI,WAAW,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC;oBAG/F,IAAG,CAAC,UAAU,EAAE;wBACb,IAAG,YAAY,EAAE;4BAChB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;yBACjC;6BAAM;4BACN,aAAa,CAAC,IAAI,CAAC,yBAAyB,GAAG,gEAAgE,CAAC,CAAA;yBAChH;qBACH;iBAEJ;aACJ;SAEJ;aAAM,IAAG,UAAU,EAAE;YAClB,aAAa,CAAC,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC,CAAA;SACpD;IAGL,CAAC,CAAC,CAAC;IAGP,OAAO,aAAa,CAAC;AAEzB,CAAC;AAAA,CAAC;AAID,SAAS,SAAS,CAAC,MAAc,EAAE,GAAW;IAC3C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACnC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAElC,IAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAClB,MAAM,CAAC,MAAM,CAAC,CAAC;SAClB;aAAM;YACH,OAAO,CAAC,GAAG,CAAC,CAAC;SAChB;IACL,CAAC,CAAC,CAAA;AACN,CAAC;AAID,OAAO,EAAE,SAAS,EAAE,KAAK,EAAC,CAAA","sourcesContent":[" function typer(scheme: object, obj: object): Array<any> {\r\n    if(typeof scheme != 'object' || Array.isArray(scheme)) throw new Error(\"Scheme value in invalid\");\r\n\r\n    const objectCasted: any = obj;\r\n    const schemeCasted: any = scheme;\r\n\r\n     const ErrorMessages: any[] = [];\r\n\r\n        Object.entries(scheme).forEach(async([key, value]) => {\r\n            const isRequired: boolean = (typeof value == 'object' && 'required' in value) ? value.required : true;\r\n\r\n            if(key in obj) {\r\n\r\n                if(typeof value == 'string') {\r\n                    if(typeof objectCasted[key] != value)  {    \r\n                        ErrorMessages.push(`The value of the key '${key}' is not of type '${value}'.`)\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                \r\n                if(Array.isArray(value) && value[0] && typeof value[0] == 'object') {\r\n\r\n\r\n                    if(!Array.isArray(objectCasted[key])) {\r\n                        ErrorMessages.push(`The value in the key '${key}' is not of type 'Array'.`)\r\n\r\n                        return;\r\n                    }\r\n\r\n                   (objectCasted[key] as Array<any>).forEach((v, i) => {\r\n                        const result: any = typer(value[0], v);\r\n\r\n\r\n                        if(result.length > 0) {\r\n                            ErrorMessages.push(`Error inside the array ${key} [${i}]: ${result}`)\r\n                        }\r\n                        \r\n\r\n                       \r\n                   })\r\n\r\n\r\n\r\n                    return;\r\n                }\r\n    \r\n                if(typeof value.type == 'object') {\r\n                    if(typeof objectCasted[key] != 'object') {\r\n\r\n                        ErrorMessages.push(`The value of the key '${key}' is not of type 'object'`);\r\n\r\n                    } else {\r\n\r\n                        const result = typer(value.type, objectCasted[key]);\r\n\r\n                        if(result.length > 0) {\r\n                            ErrorMessages.push({path: key, errors: result});\r\n                        }\r\n                    }\r\n\r\n                    \r\n                }  else {\r\n                    if(typeof objectCasted[key] != value.type) {\r\n                        ErrorMessages.push(`The value of the key '${key}' is not of type '${value.type}'.`)\r\n                    } else if('pre' in schemeCasted[key] && typeof 'function') {\r\n\r\n                        \r\n\r\n\r\n                        let messageError: any; \r\n                        const errorFunc = (s: any) => messageError = s;\r\n\r\n                        const preCallback = schemeCasted[key]['pre'](objectCasted[key], errorFunc);\r\n                        const preBoolean: boolean = (preCallback != true && preCallback != false) ? true : preCallback;\r\n\r\n\r\n                        if(!preBoolean) {\r\n                           if(messageError) {\r\n                            ErrorMessages.push(messageError);\r\n                           } else {\r\n                            ErrorMessages.push(`The value in the key '${key}' does not meet the parameters required in the function 'pre'.`)\r\n                           }\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n            } else if(isRequired) {    \r\n                ErrorMessages.push(`The '${key}' key is missing`)\r\n            }  \r\n        \r\n\r\n        });\r\n\r\n\r\n    return ErrorMessages;\r\n\r\n};\r\n\r\n\r\n\r\n function typerSync(scheme: object, obj: object): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n        const errors = typer(scheme, obj);\r\n\r\n        if(errors.length > 0) {\r\n            reject(errors);\r\n        } else {\r\n            resolve(obj);\r\n        }\r\n    })\r\n}   \r\n\r\n\r\n\r\nexport { typerSync, typer}"]}